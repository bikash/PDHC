package org.apache.hadoop.TD;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.security.SecureRandom;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import estreamj.ciphers.trivium.Trivium;
import estreamj.framework.ESJException;

/**
 * Secure file delete.
 * 
 * @author Bikash
 *
 */
public class SecureDelete {
        private static final String TAG = "SecureDelete";
        private static final Logger LOGGER = LoggerFactory.getLogger(SecureDelete.class);


        /**
         * Securely delete a file.
         * 
         * Currently, there is only 1 pass that overwrites the file first
         * with a random bit stream generated by Trivium.
         * 
         * @param file
         * @return true if this File was deleted, false otherwise.
         */
        public static boolean delete(File file) {

                if (file.exists()) {
                        SecureRandom random = new SecureRandom();

                        Trivium tri = new Trivium();
                        
                        try {
                                RandomAccessFile raf = new RandomAccessFile(file, "rw");
                                FileChannel channel = raf.getChannel();
                                MappedByteBuffer buffer = channel.map(
                                                FileChannel.MapMode.READ_WRITE, 0, raf.length());

                                byte[] key = new byte[10];
                                byte[] nonce = new byte[10];
                                random.nextBytes(key);
                                random.nextBytes(nonce);
                                
                                tri.setupKey(Trivium.MODE_DECRYPT,
                                                key, 0);
                                tri.setupNonce(nonce, 0);

                                int buffersize = 1024;
                                byte[] bytes = new byte[1024];
                                
                                // overwrite with random numbers
                                while (buffer.hasRemaining()) {
                                        int max = buffer.limit() - buffer.position();
                                        if (max > buffersize) max = buffersize;
                                        //random.nextBytes(bytes);

                                        tri.process(bytes, 0,
                                                        bytes, 0, max);

                                        buffer.put(bytes, 0, max);
                                }
                                buffer.force();
                                buffer.rewind();

                        } catch (FileNotFoundException e) {
                        	LOGGER.info(TAG, "FileNotFoundException", e);
                        } catch (IOException e) {
                        	LOGGER.info(TAG, "IOException", e);
                        } catch (ESJException e) {
                        	LOGGER.info(TAG, "ESJException", e);
                        }
                        return file.delete();
                }
                return false;
        }
}